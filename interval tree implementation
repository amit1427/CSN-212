#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<climits>
using namespace std;
struct Interval{
	int low,high;
};
struct Node{
	Interval *i;
	int max;
	Node *left,*right;
};
Node *newInterval(Interval i){
	struct Node *temp=new Node;
	temp->i=new Interval(i);
	temp->max=i.high;
	temp->left=temp->right=NULL;
	return temp;
}
Node *insert(Node *root,Interval i){
	if(root==NULL){
		return newInterval(i);
	}
	if(i.low<(root->i)->low){
		root->left=insert(root->left,i);
	}
	else{
		root->right=insert(root->right,i);
	}
	if(root->max<i.high){
		root->max=i.high;
	}
	return root;
}
struct Node * minLowInterval(struct Node* node)
{
    struct Node* current = node;

    /* loop down to find the leftmost leaf */
    while (current->left != NULL)
        current = current->left;

    return current;
}
int findMax(int a,int b,int c){
	return a>b?(a>c?a:c):(b>c?b:c);
}
Node *deleteInterval(Node *root,Interval i){
	if(root==NULL){
		return NULL;
	}
	if(i.low<(root->i)->low){
		root->left=deleteInterval(root->left,i);
	}
	else if(i.low>(root->i)->low){
		root->right=deleteInterval(root->right,i);
	}
	else if(i.low==(root->i)->low ){
		if(i.high==(root->i)->high){
			if(root->left==NULL){
				struct Node *temp=root->right;
				free(root);
				return temp;
			}
			else if(root->right==NULL){
				struct Node *temp=root->left;
				free(root);
				return temp;
			}
			struct Node *temp=minLowInterval(root->right);
			root->i=temp->i;
			root->right=deleteInterval(root->right,*(temp->i));
			}
		else{
			root->right=deleteInterval(root->right,i);
		}
	}
	root->max=findMax(root->i->high,((root->left!=NULL)?root->left->max:INT_MIN),((root->right!=NULL)?root->right->max:INT_MIN));
	return root;
}
bool doOverlap(Interval i1,Interval i2){
	return (!(i1.high<i2.low || i2.high<i1.low));
}
Interval *overlapSearch(Node *root,Interval i){
	if(root==NULL){
		return NULL;
	}
	if(doOverlap(*(root->i),i)){
		return root->i;
	}
	if(root->left!=NULL && i.low<=(root->left)->max){
		return overlapSearch(root->left,i);
	}
	return overlapSearch(root->right,i);
}
void inorder(Node *root){
	if(root!=NULL){
		inorder(root->left);
		cout<<"["<<root->i->low<<","<<root->i->high<<"] "<<"max = "<<root->max<<"\n";
		inorder(root->right);
	}
}
int main(){
	Interval ints[] = {{15, 20}, {10, 30}, {17, 19},{5, 20}, {12, 15}, {30, 40}};
    int n = sizeof(ints)/sizeof(ints[0]);
    Node *root = NULL;
    for (int i = 0; i < n; i++)
        root = insert(root, ints[i]);
cout << " traversal\n";
    inorder(root);
Interval x = {6, 7};
cout << "\nSearching for interval [" << x.low << "," << x.high << "]";
    Interval *res = overlapSearch(root, x);
    if (res == NULL)
        cout << "\nNo Overlapping Interval\n";
    else
        cout << "\nOverlaps with [" << res->low << "," << res->high << "]\n";
    Interval y= {1, 5};
    cout << "\nDeleting interval [" << y.low << "," << y.high << "]";
    root=deleteInterval(root,y);
    cout << "\n traversal\n";
    inorder(root);
    Interval z= {2, 5};
    cout << "\nDeleting interval [" << z.low << "," << z.high << "]";
    root=deleteInterval(root,z);
     cout << "\n traversal\n";
    inorder(root);
    return 0;
}
